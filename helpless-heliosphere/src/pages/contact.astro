---
import Layout from '../layouts/Layout.astro';

// Define active link for navigation
const activeLink = '/contact';

// Contact information
const contactInfo = {
  email: 'contact@johnverwey.uk',
  location: 'Exeter, UK',
  socialLinks: [
    { name: 'GitHub', icon: 'fab fa-github', url: 'https://github.com/johnmvv' },
    { name: 'LinkedIn', icon: 'fab fa-linkedin-in', url: 'https://linkedin.com/in/john-verwey-1b3bb5348' },
  ]
};
---

<Layout title="Contact | Modern Portfolio" activeLink={activeLink}>
  <!-- Contact Hero Section -->
  <section class="contact-hero">
    <div class="container">
      <h1>Get in <span class="text-gradient">Touch</span></h1>
      <p class="lead">Let's discuss how we can work together to bring your ideas to life.</p>
    </div>
  </section>

  <!-- Contact Main Section -->
  <section class="contact-main">
    <div class="container">
      <div class="contact-grid">
        <!-- Contact Information -->
        <div class="contact-info">
          <h2>Contact Information</h2>
          <p>Fill out the form or contact me directly using the information below.</p>
          
          <div class="info-list">
            <div class="info-item">
              <div class="info-icon">
                <i class="fas fa-envelope"></i>
              </div>
              <div class="info-content">
                <h3>Email</h3>
                <a href={`mailto:${contactInfo.email}`}>{contactInfo.email}</a>
              </div>
            </div>
            
            <div class="info-item">
              <div class="info-icon">
                <i class="fas fa-map-marker-alt"></i>
              </div>
              <div class="info-content">
                <h3>Location</h3>
                <p>{contactInfo.location}</p>
              </div>
            </div>
          </div>
          
          <div class="social-links">
            <h3>Connect with me</h3>
            <div class="social-icons">
              {contactInfo.socialLinks.map(social => (
                <a href={social.url} target="_blank" rel="noopener noreferrer" aria-label={social.name}>
                  <i class={social.icon}></i>
                </a>
              ))}
            </div>
          </div>
          
          <div class="blob-bg"></div>
        </div>
        
        <!-- Contact Form -->
        <div class="contact-form-container">
          <form id="contactForm" class="contact-form">
            <div class="form-header">
              <h2>Send a Message</h2>
              <p>I'll get back to you as soon as possible.</p>
            </div>
            
            <div class="form-group">
              <div class="form-floating">
                <input type="text" id="name" name="name" placeholder="" required />
                <label for="name">Your Name</label>
                <div class="form-feedback"></div>
              </div>
            </div>
            
            <div class="form-group">
              <div class="form-floating">
                <input type="email" id="email" name="email" placeholder="" required />
                <label for="email">Your Email</label>
                <div class="form-feedback"></div>
              </div>
            </div>
            
            <div class="form-group">
              <div class="form-floating">
                <select id="subject" name="subject">
                  <option value="" disabled selected></option>
                  <option value="Project Inquiry">Project Inquiry</option>
                  <option value="Job Opportunity">Job Opportunity</option>
                  <option value="Collaboration">Collaboration</option>
                  <option value="Other">Other</option>
                </select>
                <label for="subject">Subject</label>
              </div>
            </div>
            
            <div class="form-group">
              <div class="form-floating">
                <textarea id="message" name="message" placeholder="" rows="5" required></textarea>
                <label for="message">Your Message</label>
                <div class="form-feedback"></div>
              </div>
            </div>
            
            <div class="form-group">
              <button type="submit" class="btn btn-block">
                <span class="btn-text">Send Message</span>
                <span class="btn-icon"><i class="fas fa-paper-plane"></i></span>
              </button>
            </div>
            
            <div id="formStatus" class="form-status"></div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <!-- Map Section with Fancy Animation -->
  <section class="map-section">
    <div class="container">
      <div class="map-container">
        <div class="map-placeholder">
          <div class="map-pin pulse">
            <i class="fas fa-map-pin"></i>
          </div>
        </div>
        <div class="map-overlay"></div>
      </div>
    </div>
  </section>
</Layout>

<style>
  /* Contact Hero Section */
  .contact-hero {
    padding: 120px 0 60px;
    text-align: center;
  }
  
  .contact-hero h1 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
  }
  
  .contact-hero .lead {
    font-size: 1.3rem;
    color: var(--text-secondary);
    max-width: 700px;
    margin: 0 auto;
  }
  
  /* Contact Main Section */
  .contact-main {
    padding: 40px 0 100px;
  }
  
  .contact-grid {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 3rem;
    align-items: start;
  }
  
  /* Contact Information Styles */
  .contact-info {
    background-color: var(--accent-primary);
    color: white;
    padding: 3rem;
    border-radius: var(--border-radius);
    position: relative;
    overflow: hidden;
    box-shadow: 0 15px 35px var(--shadow-color);
  }
  
  .contact-info h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  
  .contact-info > p {
    margin-bottom: 2.5rem;
    opacity: 0.9;
  }
  
  .info-list {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin-bottom: 2.5rem;
    position: relative;
    z-index: 2;
  }
  
  .info-item {
    display: flex;
    align-items: flex-start;
    gap: 1.2rem;
  }
  
  .info-icon {
    font-size: 1.2rem;
    padding: 0.8rem;
    background-color: rgba(255, 255, 255, 0.15);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
  }
  
  .info-content h3 {
    margin-bottom: 0.3rem;
    font-size: 1.2rem;
  }
  
  .info-content a, .info-content p {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .info-content a:hover {
    color: white;
    text-decoration: underline;
  }
  
  .social-links {
    position: relative;
    z-index: 2;
  }
  
  .social-links h3 {
    margin-bottom: 1.2rem;
    font-size: 1.2rem;
  }
  
  .social-icons {
    display: flex;
    gap: 1rem;
  }
  
  .social-icons a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.15);
    color: white;
    font-size: 1.1rem;
    transition: all 0.3s ease;
  }
  
  .social-icons a:hover {
    background-color: white;
    color: var(--accent-primary);
    transform: translateY(-3px);
  }
  
  .blob-bg {
    position: absolute;
    top: 0;
    right: 0;
    width: 200px;
    height: 200px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
    z-index: 1;
    animation: blob-animation 10s infinite ease-in-out;
  }
  
  @keyframes blob-animation {
    0% { border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; }
    25% { border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%; }
    50% { border-radius: 40% 60% 60% 40% / 60% 30% 70% 40%; }
    75% { border-radius: 60% 40% 30% 70% / 40% 50% 50% 60%; }
    100% { border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; }
  }
  
  /* Form Styles */
  .contact-form-container {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 3rem;
    box-shadow: 0 15px 35px var(--shadow-color);
  }
  
  .form-header {
    margin-bottom: 2.5rem;
    text-align: center;
  }
  
  .form-header h2 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }
  
  .form-header p {
    color: var(--text-secondary);
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  .form-floating {
    position: relative;
  }
  
  .form-floating input,
  .form-floating textarea,
  .form-floating select {
    width: 100%;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    background-color: var(--bg-primary);
    color: var(--text-primary);
    font-family: inherit;
    font-size: 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Form input autofill styles */
  .form-floating input:-webkit-autofill,
  .form-floating input:-webkit-autofill:hover,
  .form-floating input:-webkit-autofill:focus,
  .form-floating textarea:-webkit-autofill,
  .form-floating textarea:-webkit-autofill:hover,
  .form-floating textarea:-webkit-autofill:focus,
  .form-floating select:-webkit-autofill,
  .form-floating select:-webkit-autofill:hover,
  .form-floating select:-webkit-autofill:focus {
    -webkit-text-fill-color: var(--text-primary);
    -webkit-box-shadow: 0 0 0px 1000px var(--bg-primary) inset;
    transition: background-color 5000s ease-in-out 0s;
  }

  .form-floating textarea {
    min-height: 150px;
    resize: vertical;
  }
  
  .form-floating label {
    position: absolute;
    left: 1rem;
    top: 1rem;
    color: var(--text-secondary);
    transition: all 0.3s ease;
    pointer-events: none;
  }
  
  /* Label animation for form inputs */
  .form-floating input:focus ~ label,
  .form-floating input:not(:placeholder-shown) ~ label,
  .form-floating textarea:focus ~ label,
  .form-floating textarea:not(:placeholder-shown) ~ label,
  .form-floating select:focus ~ label,
  .form-floating.active label {
    transform: translateY(-2.2rem) scale(0.85);
    color: var(--accent-primary);
    padding: 0 0.5rem;
    background-color: var(--card-bg);
  }
  
  .form-floating input:focus,
  .form-floating textarea:focus,
  .form-floating select:focus {
    outline: none;
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 3px rgba(84, 101, 255, 0.2);
  }
  
  .form-feedback {
    font-size: 0.85rem;
    margin-top: 0.5rem;
    color: #dc3545;
    min-height: 20px;
  }
  
  .btn-block {
    display: flex;
    width: 100%;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  }
  
  .btn-icon {
    transition: transform 0.3s ease;
  }
  
  .btn:hover .btn-icon {
    transform: translateX(3px);
  }
  
  .form-status {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: var(--border-radius);
    text-align: center;
    display: none;
  }
  
  .form-status.success {
    background-color: rgba(25, 135, 84, 0.1);
    color: #198754;
    border: 1px solid rgba(25, 135, 84, 0.2);
    display: block;
  }
  
  .form-status.error {
    background-color: rgba(220, 53, 69, 0.1);
    color: #dc3545;
    border: 1px solid rgba(220, 53, 69, 0.2);
    display: block;
  }
  
  /* Map Section Styles */
  .map-section {
    padding: 0 0 100px;
  }
  
  .map-container {
    height: 400px;
    border-radius: var(--border-radius);
    overflow: hidden;
    position: relative;
    box-shadow: 0 15px 35px var(--shadow-color);
  }
  
  .map-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, var(--bg-secondary), var(--card-bg));
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .map-pin {
    position: relative;
    width: 40px;
    height: 40px;
    background-color: var(--accent-primary);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-size: 1.5rem;
  }
  
  .pulse {
    position: relative;
  }
  
  .pulse::before,
  .pulse::after {
    content: '';
    position: absolute;
    border: 2px solid var(--accent-primary);
    border-radius: 50%;
    left: -20px;
    right: -20px;
    top: -20px;
    bottom: -20px;
    animation: pulse 2s linear infinite;
    opacity: 0;
  }
  
  .pulse::after {
    animation-delay: 1s;
  }
  
  @keyframes pulse {
    0% {
      transform: scale(0.5);
      opacity: 0;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      transform: scale(1.2);
      opacity: 0;
    }
  }
  
  .map-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at center, transparent 30%, var(--bg-secondary) 100%);
    pointer-events: none;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 992px) {
    .contact-grid {
      grid-template-columns: 1fr;
    }
    
    .contact-info {
      order: 1;
      margin-top: 2rem;
    }
    
    .contact-form-container {
      order: 0;
    }
  }
</style>

<script>
  // Import EmailJS dynamically to avoid SSR issues
  let emailjs;
  
  const loadEmailJs = async () => {
    try {
      const module = await import('@emailjs/browser');
      emailjs = module.default;
      emailjs.init('g6n0QNZt6YDebWwyM');
    } catch (error) {
      console.error('Error loading EmailJS:', error);
    }
  };

  // Load EmailJS when the script runs
  loadEmailJs();

  document.addEventListener('DOMContentLoaded', () => {
    const contactForm = document.getElementById('contactForm');
    const formStatus = document.getElementById('formStatus');
    const subjectSelect = document.getElementById('subject');
    
    // Handle subject select changes
    if (subjectSelect) {
      // Set initial state
      if (subjectSelect.value && subjectSelect.value !== "") {
        subjectSelect.closest('.form-floating').classList.add('active');
      }
      
      subjectSelect.addEventListener('change', function() {
        const floatingContainer = this.closest('.form-floating');
        if (this.value && this.value !== "") {
          floatingContainer.classList.add('active');
        } else {
          floatingContainer.classList.remove('active');
        }
      });

      // Handle form reset
      contactForm?.addEventListener('reset', () => {
        subjectSelect.closest('.form-floating').classList.remove('active');
      });
    }
    
    if (contactForm) {
      contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Reset previous error messages
        document.querySelectorAll('.form-feedback').forEach(el => el.textContent = '');
        formStatus.className = 'form-status';
        formStatus.textContent = '';
        
        // Get form data
        const formData = new FormData(contactForm);
        const formValues = Object.fromEntries(formData.entries());
        
        // Basic validation
        let isValid = true;
        const errors = {};
        
        if (!formValues.name?.trim()) {
          errors.name = 'Name is required';
          isValid = false;
        }
        
        if (!formValues.email?.trim()) {
          errors.email = 'Email is required';
          isValid = false;
        } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formValues.email)) {
          errors.email = 'Please enter a valid email address';
          isValid = false;
        }
        
        if (!formValues.message?.trim()) {
          errors.message = 'Message is required';
          isValid = false;
        }
        
        // Show validation errors if any
        if (!isValid) {
          for (const [field, message] of Object.entries(errors)) {
            const feedbackEl = document.querySelector(`#${field} + label + .form-feedback`);
            if (feedbackEl) feedbackEl.textContent = message;
          }
          return;
        }
        
        // Prepare submission
        const submitBtn = contactForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
        
        try {
          if (!emailjs) {
            throw new Error('EmailJS not initialized');
          }
          
          // Send email using EmailJS
          const response = await emailjs.send(
            'service_5c7q67k', // Service ID
            'template_mo2ai04', // Template ID
            {
              from_name: formValues.name,
              to_email: 'email@johnverwey.uk', // Changed to the destination email
              subject: formValues.subject || 'Contact Form Submission',
              message: formValues.message,
              reply_to: formValues.email, // Use the form submitter's email as reply-to
              to_name: 'John' // Recipient name
            }
          );
          
          // Success state
          formStatus.className = 'form-status success';
          formStatus.textContent = 'Your message has been sent successfully!';
          contactForm.reset();
          
          // Clear success message after some time
          setTimeout(() => {
            formStatus.className = 'form-status';
            formStatus.textContent = '';
          }, 5000);
        } catch (error) {
          console.error('EmailJS error:', error);
          formStatus.className = 'form-status error';
          formStatus.textContent = 'Sorry, there was a problem sending your message. Please try again later.';
        } finally {
          // Reset button
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
        }
      });
    }
  });
</script>